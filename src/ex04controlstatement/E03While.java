package ex04controlstatement;

public class E03While {

	/*
	 while문
	  - 반복의 횟수가 정해져있지 않을 때 주로 사용하는 반복문.
	  - 반복의 횟수가 명확할 때는 주로 for문을 사용한다.
	  형식]
	   반복을 위한 변소의 초기값 선언;
	   while(조건문) {
	   	실행문;
	   	반복을 위한 변수의 증감식; -> 반복문 탈출을 위한 ++, --와 같은 연산이 필요
	   }
	  - 반복의 조건이 false일 때 while문을 탈출한다.
	 */
	public static void main(String[] args) {


		/*
		 시나리오] 1~10까지의 합을 구하는 프로그램을 while문으로 작성하시오.
		 */
		int sum = 0; //누적합을 저장하기 위한 변수 선언.증가하는 i를 누적해서 더함.
		int i = 1; //반복을 위한 변수선언 및 초기화
		while (i<=10) { //반복의 조건 설정. i가 11이상이 되면 while 내부 실행하지 않고 바로 탈출
			sum += i; //증가 되는 i를 sum에 누적해서 더함
			i++; // while문 탈출을 위한 조건을 위한 증가 연산
		}
		System.out.println("1~10까지의 합은 : "+ sum);
		
		/*
		 시나리오] 1~100까지의 정수증 3의 배수이거나 5의 배수인 수의
		  		합을 구하는 프로그램을 while문을 이용해 작성하시오.
		 */
		int j = 1;
		int total = 0;
		while (j<=100) {
			if (j%3==0 || j%5==0) {
				total += j;
			}
			j++;
		}
		System.out.println("1~100사이의 3 또는 5의 배수의 합 : " + total);
		
		/*
		 시나리오] 구구단을 출력하는 프로그램을 while문으로 작성하시오
		 */
		int dan =2; // 단
		while (dan<=9) { // 단은 2~9까지 증가함
			int su =1; // 수(하나의 단을 출력한 후 단이 증가하면 수는 1로 초기화됨)
			while (su<=9) {
				System.out.printf("%-2d*%2d=%2d", dan, su, (dan*su));
				System.out.print("   ");
				su++;
			}
			System.out.println();
			dan++;
		}
		System.out.println("\n=====================================\n");
		
		/*
		 시나리오] 아래와 같은 모양을 출력하는 while문을 작성하시오
		 출력결과
		 	1 0 0 0
		 	0 1 0 0
		 	0 0 1 0
		 	0 0 0 1
		 */
		
		int m=1;
		while (m<=4) {
			int n=1;
			while (n<=4) {
				if (m==n) {
					System.out.print("1 ");
				}
				else {
					System.out.print("0 ");
				}
				n++;
			}
			m++;
			System.out.println();
		}
		
		
		
	/*
	 질문. 변수 선언은 한 번만 가능하다고 했는데 변수 su는 반복문 내부에서 반복적으로 변수선언이 왜 가능한건지
	 답. - 지역 변수는 해당 지역(블록)을 벗어나게 되면("}"->중괄호가 닫혀서 끝나면) 메모리에서 소멸되기 때문이다.
	  	- 지역은 {}의 수준을 기준으로 생각하면 된다(클래스 단위, 메인 함수 단위 등도 하나의 지역이라고 생각하면 된다)
	  	- 변수는 한 번 선언하면 동일 수준 혹은 그 이하의 수준에서는 자유롭게 사용할 수 있다.
	  	- 변수 su의 경우는 첫번째 while 내부에서 선언되었기 때문에 두 번째 반복문이 종료되고
	 	    상위 수준인 첫번째 반복문의 }를 만나는 순간 소멸되고 위로 다시 올라왔을 때는
	 	    중복 선언이 아니라 처음 선언하는 것으로 볼 수 있다.
	 	- 그렇기 때문에 한 개의 변수를 여러 지역 혹은 수준에서 쓰고자 한다면 이를 모두 포함하는 범위를 고려하여
	 	    적당한 수준에서 변수를 선언해야한다.
	 
	     
	 */
		
	}

}
